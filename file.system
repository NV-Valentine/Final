#include <iostream>
#include <windows.h>
#include <cwchar>
#include <locale>
#include <fstream>

void showDrives() 
{
    DWORD drives = GetLogicalDrives();
    std::wcout << L"\nAvailable drives:\n";
    for (wchar_t letter = L'A'; letter <= L'Z'; letter++) {
        if (drives & (1 << (letter - L'A'))) {
            std::wcout << letter << L":\\\n";
        }
    }
}

void listDirectory(const wchar_t* path) {
    WIN32_FIND_DATAW findFileData;
    wchar_t searchPath[MAX_PATH];
    wcscpy_s(searchPath, MAX_PATH, path);
    wcscat_s(searchPath, MAX_PATH, L"\\*");

    HANDLE hFind = FindFirstFileW(searchPath, &findFileData);
    if (hFind == INVALID_HANDLE_VALUE) {
        std::wcout << L"Error: cannot open folder!\n";
        return;
    }

    std::wcout << L"\nContents of " << path << L":\n";
    do {
        if (wcscmp(findFileData.cFileName, L".") != 0 && wcscmp(findFileData.cFileName, L"..") != 0) {
            std::wcout << (findFileData.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY ? L"[DIR] " : L"[FILE] ");
            std::wcout << findFileData.cFileName << L"\n";
        }
    } while (FindNextFileW(hFind, &findFileData));

    FindClose(hFind);
}

void goUpDirectory(wchar_t* path) {
    size_t len = wcslen(path);
    for (size_t i = len - 1; i > 0; --i) {
        if (path[i] == L'\\') {
            path[i] = L'\0';
            break;
        }
    }
}

void copyFile(const wchar_t* source, const wchar_t* destination) {
    if (CopyFileW(source, destination, FALSE)) {
        std::wcout << L"File copied successfully!\n";
    }
    else {
        std::wcout << L"Error copying file!\n";
    }
}

void searchFiles(const wchar_t* path, const wchar_t* mask) {
    WIN32_FIND_DATAW findFileData;
    wchar_t searchPath[MAX_PATH];
    wcscpy_s(searchPath, MAX_PATH, path);
    wcscat_s(searchPath, MAX_PATH, L"\\");
    wcscat_s(searchPath, MAX_PATH, mask);

    HANDLE hFind = FindFirstFileW(searchPath, &findFileData);
    if (hFind == INVALID_HANDLE_VALUE) {
        std::wcout << L"No files found for this mask.\n";
        return;
    }

    std::wcout << L"\nFiles matching " << mask << L":\n";
    do {
        std::wcout << findFileData.cFileName << L"\n";
    } while (FindNextFileW(hFind, &findFileData));

    FindClose(hFind);
}


int main() 
{
    std::setlocale(LC_ALL, "");
    wchar_t currentPath[MAX_PATH] = L"C:\\";
    wchar_t input[MAX_PATH];
    int choice;


    while (true) 
    {
        std::wcout << L"\n--- Menu ---\n";
        std::wcout << L"1. Show available drives\n";
        std::wcout << L"2. Show current folder contents\n";
        std::wcout << L"3. Go up one level\n";
        std::wcout << L"4. Change folder\n";
        std::wcout << L"5. Search files by mask\n";
        std::wcout << L"6. Search string in file\n";
        std::wcout << L"7. Find and replace in file\n";
        std::wcout << L"8. Copy file\n";
        std::wcout << L"9. Exit\n";
        std::wcout << L"Choose option: ";
        std::wcin >> choice;
        std::wcin.ignore();

        if (choice == 1) showDrives();
        else if (choice == 2) listDirectory(currentPath);
        else if (choice == 3) goUpDirectory(currentPath);
        else if (choice == 4) 
        {
            std::wcout << L"Enter folder path: ";
            std::wcin.getline(input, MAX_PATH);
            wcscpy_s(currentPath, MAX_PATH, input);
        }
        else if (choice == 5) 
        {
            std::wcout << L"Enter mask (e.g. *.txt): ";
            std::wcin.getline(input, MAX_PATH);
            searchFiles(currentPath, input);
        }
        else if (choice == 6)
        {
            std::wcout << L"Enter file path: ";
            std::wcin.getline(input, MAX_PATH);
            wchar_t pattern[256];
            std::wcout << L"Enter search string: ";
            std::wcin.getline(pattern, 256);
            searchInFile(input, pattern);
        }
        else if (choice == 7) 
        {
            std::wcout << L"Enter file path: ";
            std::wcin.getline(input, MAX_PATH);
            wchar_t findText[256], replaceText[256];
            std::wcout << L"Text to find: ";
            std::wcin.getline(findText, 256);
            std::wcout << L"Replace with: ";
            std::wcin.getline(replaceText, 256);
            findAndReplace(input, findText, replaceText);
        }
        else if (choice == 8)
        {
            wchar_t src[MAX_PATH], dest[MAX_PATH];
            std::wcout << L"Source file path: ";
            std::wcin.getline(src, MAX_PATH);
            std::wcout << L"Destination file path: ";
            std::wcin.getline(dest, MAX_PATH);
            copyFile(src, dest);
        }
        else if (choice == 9) 
        {
            std::wcout << L"Exiting...\n";
            break;
        }
        else std::wcout << L"Invalid option!\n";
        
    }
    return 0;
}
